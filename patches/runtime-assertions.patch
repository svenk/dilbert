Index: peano/peano.cpp
===================================================================
--- peano/peano.cpp	(Revision 2762)
+++ peano/peano.cpp	(Arbeitskopie)
@@ -19,7 +19,15 @@
 #include "tarch/parallel/Node.h"
 #include "tarch/parallel/NodePool.h"
 
+/* DILBERT START */
+#include "tarch/Assertions.h" // for accessing the mode storage
+bool dilbert_Asserts; // Storage for the global
 
+#include <cstdlib> // getenv
+#include <strings.h> // strcasecmp
+bool equals(const char* a, const char* b) { return (strcasecmp (a, b) == 0); }
+/* DILBERT END */
+
 void peano::fillLookupTables() {
   setupLookupTableForTwoPowI();
   setupLookupTableForThreePowI();
@@ -32,6 +40,22 @@
 
 
 int peano::initParallelEnvironment(int* argc, char*** argv) {
+  // This is a dilbert patch to the effective MAIN
+  /* DILBERT START */ {
+    char* mode;
+    mode = std::getenv("MODE");
+    // by default, if no environment variable is given, do no assertions.
+    if(mode!=NULL) {
+      dilbert_Asserts = (equals(mode, "Debug") || equals(mode, "Asserts"));
+      printf("Dilbert patches Peano: Assertion MODE='%s' was given, therefore Asserts=%s\n",
+        mode, dilbert_Asserts ? "true" : "false");
+    } else {
+      dilbert_Asserts = false;
+      printf("Dilbert patches Peano: Assertion MODE env var not given, thus Asserts=%s\n", dilbert_Asserts ? "true" : "false");
+    }
+    // print the decision, for understanding what goes on.
+  } /* DILBERT END */
+
   #ifdef Parallel
   if ( tarch::parallel::Node::getInstance().init(argc,argv) ) {
     tarch::parallel::NodePool::getInstance().init();
Index: tarch/Assertions.h
===================================================================
--- tarch/Assertions.h	(Revision 2762)
+++ tarch/Assertions.h	(Arbeitskopie)
@@ -1,3 +1,8 @@
+/**
+ * Dilbert -- a patch for Peano.
+ * This file is a Dilbert patch file.
+ **/
+
 // Copyright (C) 2009 Technische Universitaet Muenchen
 // This file is part of the Peano project. For conditions of distribution and
 // use, please see the copyright notice at www5.in.tum.de/peano
@@ -8,14 +13,29 @@
 #include <mpi.h>
 #endif
 
-#ifdef  Asserts
 #include <stdio.h>
 #include <stdlib.h>
-#endif
 #include <cassert>
 #include <cstdio>
 
   /**
+   * Make the check for assertions something which is always built in but only
+   * checked depending on runtime decisions.
+   * 
+   * This enum corresponds to the decision points
+   *
+   *   export MODE=Debug                     Build debug version of code
+   *   export MODE=Asserts                   Build release version of code that is augmented with assertions
+   *   export MODE=Profile                   Build release version of code that produces profiling information
+   *   export MODE=Release                   Build release version of code (default)
+   *
+   * where now at least the debug/asserts/release can be made at runtime.
+   *
+   **/
+  extern bool dilbert_Asserts; // stored in peano/peano.cpp
+  #define DILBERT_PEANO_IF_ASSERTION(cond) if (dilbert_Asserts && (cond))
+
+  /**
    * Define the assert macro. An assertion is given a boolean expression. If
    * the expression isn't true, the program immediatly quits giving the user
    * filename and line of the assertion failed. Assertions should be used to
@@ -35,7 +55,7 @@
     std::cerr.precision(20); \
   }
 
-  #ifdef Asserts
+  /* #ifdef Asserts */ // <- nope, we do compile this now always.
     #include "tarch/logging/Log.h"
     #define assertionTriggersExit { \
       std::cout.flush(); \
@@ -50,7 +70,7 @@
      * Argument has to be a boolean expression that has to hold. Otherwise
      * assertion will fail.
      */
-    #define assertion(expr) if (!(expr)) { \
+    #define assertion(expr) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       assertionTriggersExit; \
@@ -64,7 +84,7 @@
      * param is plotted to the command line. The parameter has to provide
      * \code operator<< \endcode
      */
-    #define assertion1(expr,param) if (!(expr)) { \
+    #define assertion1(expr,param) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param << ": " << param << std::endl; \
@@ -72,7 +92,7 @@
     }
 
 
-    #define assertion1WithExplanation(expr,param,explanation) if (!(expr)) { \
+    #define assertion1WithExplanation(expr,param,explanation) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param << ": " << param << std::endl; \
@@ -89,7 +109,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion2(expr,param0,param1) if (!(expr)) { \
+    #define assertion2(expr,param0,param1) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -105,7 +125,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion3(expr,param0,param1,param2) if (!(expr)) { \
+    #define assertion3(expr,param0,param1,param2) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -122,7 +142,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion4(expr,param0,param1,param2,param3) if (!(expr)) { \
+    #define assertion4(expr,param0,param1,param2,param3) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -140,7 +160,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion5(expr,param0,param1,param2,param3,param4) if (!(expr)) { \
+    #define assertion5(expr,param0,param1,param2,param3,param4) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -159,7 +179,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion6(expr,param0,param1,param2,param3,param4,param5) if (!(expr)) { \
+    #define assertion6(expr,param0,param1,param2,param3,param4,param5) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -179,7 +199,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion7(expr,param0,param1,param2,param3,param4,param5,param6) if (!(expr)) { \
+    #define assertion7(expr,param0,param1,param2,param3,param4,param5,param6) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -200,7 +220,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion8(expr,param0,param1,param2,param3,param4,param5,param6,param7) if (!(expr)) { \
+    #define assertion8(expr,param0,param1,param2,param3,param4,param5,param6,param7) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -222,7 +242,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertion9(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8) if (!(expr)) { \
+    #define assertion9(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -238,7 +258,7 @@
     }
 
 
-    #define assertion10(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9) if (!(expr)) { \
+    #define assertion10(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -255,7 +275,7 @@
     }
 
 
-    #define assertion11(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10) if (!(expr)) { \
+    #define assertion11(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -273,7 +293,7 @@
     }
 
 
-    #define assertion12(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11) if (!(expr)) { \
+    #define assertion12(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -292,7 +312,7 @@
     }
 
 
-    #define assertion25(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11,param12,param13,param14,param15,param16,param17,param18,param19,param20,param21,param22,param23,param24) if (!(expr)) { \
+    #define assertion25(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11,param12,param13,param14,param15,param16,param17,param18,param19,param20,param21,param22,param23,param24) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr <<  std::endl; \
       std::cerr << "parameter " << #param0 << ": " << param0 << std::endl; \
@@ -330,7 +350,7 @@
      * Argument lhs and rhs have to be equal. Otherwise assertion will fail.
      * To compare them, the operator \code operator== \endcode is used.
      */
-    #define assertionEquals(lhs,rhs) if ((lhs)!=(rhs)) { \
+    #define assertionEquals(lhs,rhs) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       assertionTriggersExit; \
@@ -342,7 +362,7 @@
      * Argument lhs and rhs have to be equal. Otherwise assertion will fail.
      * To compare them, the operator \code operator== \endcode is used.
      */
-    #define assertionEqualsMsg(lhs,rhs,msg) if ((lhs)!=(rhs)) { \
+    #define assertionEqualsMsg(lhs,rhs,msg) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << msg << std::endl; \
@@ -358,7 +378,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals1(lhs,rhs,larg) if ((lhs)!=(rhs)) { \
+    #define assertionEquals1(lhs,rhs,larg) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -374,7 +394,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals2(lhs,rhs,larg,rarg) if ((lhs)!=(rhs)) { \
+    #define assertionEquals2(lhs,rhs,larg,rarg) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "left argument " << #larg << ": " << larg << std::endl; \
@@ -391,7 +411,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals3(lhs,rhs,larg,rarg,three) if ((lhs)!=(rhs)) { \
+    #define assertionEquals3(lhs,rhs,larg,rarg,three) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -409,7 +429,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals4(lhs,rhs,larg,rarg,three,four) if ((lhs)!=(rhs)) { \
+    #define assertionEquals4(lhs,rhs,larg,rarg,three,four) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -428,7 +448,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals5(lhs,rhs,larg,rarg,three,four,five) if ((lhs)!=(rhs)) { \
+    #define assertionEquals5(lhs,rhs,larg,rarg,three,four,five) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -448,7 +468,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals6(lhs,rhs,larg,rarg,three,four,five,six) if ((lhs)!=(rhs)) { \
+    #define assertionEquals6(lhs,rhs,larg,rarg,three,four,five,six) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -469,7 +489,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals7(lhs,rhs,larg,rarg,three,four,five,six,seven) if ((lhs)!=(rhs)) { \
+    #define assertionEquals7(lhs,rhs,larg,rarg,three,four,five,six,seven) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -491,7 +511,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionEquals8(lhs,rhs,larg,rarg,three,four,five,six,seven,eight) if ((lhs)!=(rhs)) { \
+    #define assertionEquals8(lhs,rhs,larg,rarg,three,four,five,six,seven,eight) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -505,7 +525,7 @@
       assertionTriggersExit; \
     }
 
-    #define assertionEquals9(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine) if ((lhs)!=(rhs)) { \
+    #define assertionEquals9(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -521,7 +541,7 @@
     }
 
 
-    #define assertionEquals10(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten) if ((lhs)!=(rhs)) { \
+    #define assertionEquals10(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -538,7 +558,7 @@
     }
 
 
-    #define assertionEquals11(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11) if ((lhs)!=(rhs)) { \
+    #define assertionEquals11(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -556,7 +576,7 @@
     }
 
 
-    #define assertionEquals12(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11,p12) if ((lhs)!=(rhs)) { \
+    #define assertionEquals12(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11,p12) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -575,7 +595,7 @@
     }
 
 
-    #define assertionEquals13(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11,p12,p13) if ((lhs)!=(rhs)) { \
+    #define assertionEquals13(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11,p12,p13) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -595,7 +615,7 @@
     }
 
 
-    #define assertionEquals14(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11,p12,p13,p14) if ((lhs)!=(rhs)) { \
+    #define assertionEquals14(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten,p11,p12,p13,p14) DILBERT_PEANO_IF_ASSERTION ((lhs)!=(rhs)) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #larg << ": " << larg << std::endl; \
@@ -622,7 +642,7 @@
      * Otherwise assertion will fail. The machine precision is evaluated via
      * equals().
      */
-    #define assertionNumericalEquals(lhs,rhs) if (!tarch::la::equals( (lhs),(rhs) )) { setAssertionOutputFormat; std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; assertionTriggersExit; }
+    #define assertionNumericalEquals(lhs,rhs) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { setAssertionOutputFormat; std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; assertionTriggersExit; }
 
     /**
      * @see ASSERTION_EXIT_CODE
@@ -635,7 +655,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals1(lhs,rhs,a) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals1(lhs,rhs,a) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "argument " << #a << ": " << a << std::endl; \
@@ -653,7 +673,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals2(lhs,rhs,larg,rarg) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals2(lhs,rhs,larg,rarg) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "left argument " << #larg << ": " << larg << std::endl; \
@@ -672,7 +692,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals3(lhs,rhs,a,b,c) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals3(lhs,rhs,a,b,c) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "first argument " << #a << ": " << a << std::endl; \
@@ -692,7 +712,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals4(lhs,rhs,a,b,c,d) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals4(lhs,rhs,a,b,c,d) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -713,7 +733,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals5(lhs,rhs,a,b,c,d,e) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals5(lhs,rhs,a,b,c,d,e) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -735,7 +755,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals6(lhs,rhs,a,b,c,d,e,f) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals6(lhs,rhs,a,b,c,d,e,f) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -758,7 +778,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals7(lhs,rhs,a,b,c,d,e,f,g) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals7(lhs,rhs,a,b,c,d,e,f,g) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -782,7 +802,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals8(lhs,rhs,a,b,c,d,e,f,g,h) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals8(lhs,rhs,a,b,c,d,e,f,g,h) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -807,7 +827,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals9(lhs,rhs,a,b,c,d,e,f,g,h,i) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals9(lhs,rhs,a,b,c,d,e,f,g,h,i) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -833,7 +853,7 @@
      * are plotted to the command line. The parameters thus have to provide
      * \code operator<< \endcode
      */
-    #define assertionNumericalEquals10(lhs,rhs,a,b,c,d,e,f,g,h,i,j) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals10(lhs,rhs,a,b,c,d,e,f,g,h,i,j) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -849,7 +869,7 @@
       assertionTriggersExit; \
     }
 
-    #define assertionNumericalEquals11(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals11(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -866,7 +886,7 @@
       assertionTriggersExit; \
     }
 
-    #define assertionNumericalEquals12(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals12(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -884,7 +904,7 @@
       assertionTriggersExit; \
     }
 
-    #define assertionNumericalEquals13(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l,m) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals13(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l,m) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -903,7 +923,7 @@
       assertionTriggersExit; \
     }
 
-    #define assertionNumericalEquals14(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l,m,n) if (!tarch::la::equals( (lhs),(rhs) )) { \
+    #define assertionNumericalEquals14(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l,m,n) DILBERT_PEANO_IF_ASSERTION (!tarch::la::equals( (lhs),(rhs) )) { \
       setAssertionOutputFormat; \
       std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #lhs << "==" #rhs << std::endl << #lhs << "=" << lhs << "\t == \t" << #rhs << "=" << rhs << std::endl; \
       std::cerr << "1st argument " << #a << ": " << a << std::endl; \
@@ -948,7 +968,7 @@
      * Equals assertion(). Yet, if the assertion fails, message is written to
      * the terminal. Thus, message should have type string or char.
      */
-    #define assertionMsg(expr,message) if (!(expr)) { \
+    #define assertionMsg(expr,message) DILBERT_PEANO_IF_ASSERTION (!(expr)) { \
       setAssertionOutputFormat; std::cerr << "assertion in file " << __FILE__ << ", line " << __LINE__ << " failed: " << #expr << std::endl << message << std::endl ; \
       assertionTriggersExit; \
     }
@@ -963,65 +983,5 @@
       std::cerr.flush(); \
       assertionTriggersExit; \
     }
-  #else
-    #define assertion(expr)
-    #define assertion1(expr,param)
-    #define assertion2(expr,param0,param1)
-    #define assertion3(expr,param0,param1,param2)
-    #define assertion4(expr,param0,param1,param2,param3)
-    #define assertion5(expr,param0,param1,param2,param3,param4)
-    #define assertion6(expr,param0,param1,param2,param3,param4,param5)
-    #define assertion7(expr,param0,param1,param2,param3,param4,param5,param6)
-    #define assertion8(expr,param0,param1,param2,param3,param4,param5,param6,param7)
-    #define assertion9(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8)
-    #define assertion10(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9)
-    #define assertion11(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10)
-    #define assertion12(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11)
-    #define assertion25(expr,param0,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11,param12,param13,param14,param15,param16,param17,param18,param19,param20,param21,param22,param23,param24)
-    #define assertion1WithExplanation(expr,param,explanation)
-    #define assertionEquals(lhs,rhs)
-    #define assertionEqualsMsg(lhs,rhs,msg)
-    #define assertionEquals1(lhs,rhs,a)
-    #define assertionEquals2(lhs,rhs,a,b)
-    #define assertionEquals3(lhs,rhs,a,b,c)
-    #define assertionEquals4(lhs,rhs,larg,rarg,three,four)
-    #define assertionEquals5(lhs,rhs,larg,rarg,three,four,five)
-    #define assertionEquals6(lhs,rhs,larg,rarg,three,four,five,six)
-    #define assertionEquals7(lhs,rhs,larg,rarg,three,four,five,six,seven)
-    #define assertionEquals8(lhs,rhs,larg,rarg,three,four,five,six,seven,eight)
-    #define assertionEquals9(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine)
-    #define assertionEquals10(lhs,rhs,larg,rarg,three,four,five,six,seven,eight,nine,ten)
-    #define assertionEquals11(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k)
-    #define assertionEquals12(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l)
-    #define assertionEquals13(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l,m)
-    #define assertionEquals14(lhs,rhs,a,b,c,d,e,f,g,h,i,j,k,l,m,n)
-    #define assertionNumericalEquals(lhs,rhs)
-    #define assertionNumericalEquals1(lhs,rhs,a)
-    #define assertionNumericalEquals2(lhs,rhs,a,b)
-    #define assertionNumericalEquals3(lhs,rhs,a,b,c)
-    #define assertionNumericalEquals4(lhs,rhs,a,b,c,d)
-    #define assertionNumericalEquals5(lhs,rhs,a,b,c,d,e)
-    #define assertionNumericalEquals6(lhs,rhs,a,b,c,d,e,f)
-    #define assertionNumericalEquals7(lhs,rhs,a,b,c,d,e,f,g)
-    #define assertionNumericalEquals8(lhs,rhs,a,b,c,d,e,f,g,h)
-    #define assertionNumericalEquals9(lhs,rhs,a,b,c,d,e,f,g,h,i)
-    #define assertionNumericalEquals10(lhs,rhs,a,b,c,d,e,f,g,h,i,j)
-    #define assertionNumericalEquals11(lhs,rhs,a,b,c,d,e,f,g,h,i,j)
-    #define assertionNumericalEquals12(lhs,rhs,a,b,c,d,e,f,g,h,i,j)
-    #define assertionNumericalEquals13(lhs,rhs,a,b,c,d,e,f,g,h,i,j)
-    #define assertionNumericalEquals14(lhs,rhs,a,b,c,d,e,f,g,h,i,j)
-    #define assertionVectorNumericalEquals(lhs,rhs)
-    #define assertionVectorNumericalEquals1(lhs,rhs,param0)
-    #define assertionVectorNumericalEquals2(lhs,rhs,param0,param1)
-    #define assertionVectorNumericalEquals3(lhs,rhs,param0,param1,param2)
-    #define assertionVectorNumericalEquals4(lhs,rhs,param0,param1,param2,param3)
-    #define assertionVectorNumericalEquals5(lhs,rhs,param0,param1,param2,param3,param4)
-    #define assertionVectorNumericalEquals6(lhs,rhs,param0,param1,param2,param3,param4,param5)
-    #define assertionVectorNumericalEquals7(lhs,rhs,param0,param1,param2,param3,param4,param5,param6)
-    #define assertionVectorNumericalEquals8(lhs,rhs,param0,param1,param2,param3,param4,param5,param6,param7)
-    #define assertionVectorNumericalEquals9(lhs,rhs,param0,param1,param2,param3,param4,param5,param6,param7,param8)
-    #define assertionMsg(expr,message)
-    #define assertionFail(message)
-  #endif
 
-#endif
+#endif /* _TARCH_ASSERTIONS_H_ */
